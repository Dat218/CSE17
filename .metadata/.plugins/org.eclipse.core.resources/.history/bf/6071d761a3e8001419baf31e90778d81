/*
CSE 17
Daniel Truong
862607977
Program #5 DEADLINE: April 23, 2015
Program Description: Digital Music Library with Advanced Sorting
*/
import java.util.Comparator;
import java.text.DecimalFormat;
public class Song {
	private String title;
	private String artist;
	private String album;
	private int time;
	private int year;
	public static Comparator<Song> SongTitleComparator = new songTitle(); //A constant instance with a compare() method that orders by title (ascending).
	public static Comparator<Song> SongArtistComparator = new ArtistComparator(); //A constant instance with a compare() method that orders by artist (ascending).
	public static Comparator<Song> SongYearComparator = new YearComparator(); //A constant instance with a compare() method that orders by year (ascending).
	
	//Creates a song instance and initializes all the instance variables.
	public Song(String title, String artist, String album, int year, int time) {
		this.title = title;
		this.artist = artist; 
		this.album = album;
		this.year = year;
		this.time = time;
	}
	
	//Creates a song instance and initializes all the instance variables.
	public Song(String title, String artist, String album, int year, String timeString) {
		this.title = title; 
		this.artist = artist; 
		this.album = album; 
		this.year = year;
		this.time = timeStringToSecs(timeString);
	}
	
	//get method for title
	public String getTitle() {
		return this.title;
	}
	
	//get method for artist
	public String getArtist() {
		return this.artist;
	}
	
	//get method for album
	public String getAlbum() {
		return this.album;
	}
	
	//get method for year
	public int getYear() {
		return this.year;
	}
	
	//get method for time
	public int getTime() {
		return this.time;
	}
	
	//Converts time, if type is an int, into a time format(00:00)
	public String getTimeAsFormattedString() {
		DecimalFormat format = new DecimalFormat("00");
		String time = "";
		int hours = this.time/60;
		return time += hours + ":" + format.format(this.time - hours*60); 
	}
	
	//Prints each song of the song arraylist in a separate row with all the details
	public void printSongRow() {
		String songDetail = "";
		songDetail += this.getTitle();
		for (int t=0; t<25-this.getTitle().length(); t++) {
			songDetail += " ";
		}
		songDetail += "\t" + this.getArtist();
		for (int a=0; a<25-this.getArtist().length(); a++) {
			songDetail += " ";
		}
		songDetail += "\t" + this.getAlbum();
		for (int al=0; al<30-this.getAlbum().length(); al++) {
			songDetail += " ";
		}
		songDetail += "\t" + this.getYear() + "\t" + this.getTimeAsFormattedString();
		System.out.println(songDetail);
	}
	
	//to string method for each song instance
	public String toString() {
		String songString = "";
		char quotations = '"';
		return songString += quotations + this.title + quotations + " by " + this.artist + " (" + this.year + ")";
	}
	
	//gives the time, if given in a 00:00 format, in total seconds. 
	public static int timeStringToSecs(String timeString) {
		String[] stringTime = timeString.split(":");
		int count = 0;
		int totalTime = 0;
		for (int i=stringTime.length-1; i>=0; i--) {
			int time = Integer.parseInt(stringTime[i]);
			if (count != 0) {
				for (int m=0; m<count; m++) {
					time = time * 60;
				}
			}
			totalTime += time;
			count++;
		}
		return totalTime;		
	}
	class songTitle implements Comparator<Song> {
		public int compare(Song o1, Song o2) {
			if (o1.getTitle().compareTo(o2.getTitle()) < 0) {
				return -1;
			}
			else if (o1.getTitle().compareTo(o2.getTitle()) > 0) {
				return 1;
			}
			else {
				return 0;
			}
		}
	}
}
/*
 * Comparator class for SongTitleComparator instance variable.
 * Implements the compare method that returns -1 title of o1 comes before title of 02,
 * 1 if title of o1 comes after title of o2, and zero if the two titles are the same
 */
//class songTitle implements Comparator<Song> {
//	public int compare(Song o1, Song o2) {
//		if (o1.getTitle().compareTo(o2.getTitle()) < 0) {
//			return -1;
//		}
//		else if (o1.getTitle().compareTo(o2.getTitle()) > 0) {
//			return 1;
//		}
//		else {
//			return 0;
//		}
//	}
//}

/*
 * Comparator class for SongArtistComparator instance variable.
 * Implements the compare method that returns -1 if artist of o1 comes before artist of 02,
 * 1 if artist of o1 comes after artist of o2, and zero if the two artists are the same
 */
class ArtistComparator implements Comparator<Song> {
	public int compare(Song o1, Song o2) {
		if (o1.getArtist().compareTo(o2.getArtist()) < 0) {
			return -1;
		}
		if (o1.getArtist().compareTo(o2.getArtist()) > 0) {
			return 1;
		}
		else {
			return 0;
		}
	}
}
/*
 * Comparator class for SongYearComparator instance variable.
 * Implements the compare method that returns -1 if year of o1 comes before year of 02,
 * 1 if year of o1 comes after year of o2, and zero if the two years are the same
 */
class YearComparator implements Comparator<Song> {
	public int compare(Song o1, Song o2) {
		if (o1.getYear() < o2.getYear()) {
			return -1;
		}
		else if (o1.getYear() > o2.getYear()) {
			return 1;
		}
		else {
			return 0;
		}
	}
	
}

