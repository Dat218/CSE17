/*
CSE 17
Daniel Truong
862607977
Homework #3 DEADLINE: February 18, 2015
Program Description: Document Statistics
*/ 
import java.util.Scanner;
public class Document {
	private static Term[] terms;
	
	Document(String text) {
		String[] tokens = text.split(" ");
		recordTermFreqs(tokens);
	}
	
	private void recordTermFreqs(String[] tokens) {
		sortStrings(tokens);
		int sameStrings = 0; 
		//Find Duplicates
		for (int m=0; m<tokens.length-1; m++) {
			for (int n=m+1; n<tokens.length; n++) {
				if (tokens[m].compareTo(tokens[n]) == 0) {
					sameStrings++;
					break;
				}
				else if (tokens[m].compareTo(tokens[n]) != 0) {
					break;
				}
			}
		}
		//Create an array with only distinct terms, no duplicates
		String[] distinctTokens = new String[tokens.length-sameStrings];
		distinctTokens[0] = tokens[0];
		int index = 0;
		for (int k=1; k<tokens.length; k++) {
			if (tokens[k].compareTo(distinctTokens[index]) != 0) {
				distinctTokens[index+1] = tokens[k];
				index++;
			}
		}
		//Find frequency of distinct terms
		int[] tokenFrequency = new int[distinctTokens.length];
		int tokenCount = 0;
		for (int d=0; d<tokenFrequency.length; d++) {
			tokenCount = 0;
			for (int t=0; t<tokens.length; t++) {
				if (distinctTokens[d].compareTo(tokens[t]) == 0) {
					tokenCount++;
				}
			}
			tokenFrequency[d] = tokenCount;
		}
		terms = new Term[distinctTokens.length]; 
		for (int j=0; j<distinctTokens.length; j++) {
			terms[j] = new Term(distinctTokens[j], tokenFrequency[j]);
		}	
	}
	
	public static String[] sortStrings(String[] tokens) {
		int min = 0;
		for (int i=0; i<tokens.length-1; i++) {
			min = i;
			for (int m=i+1; m<tokens.length; m++) {
				if (tokens[min].compareTo(tokens[m]) < 0) { 
					continue;
				}
				else if (tokens[min].compareTo(tokens[m]) > 0) {
					min = m;
				}
				else {
					continue;
				}
			}
			String temp = tokens[i];
			tokens[i] = tokens[min];
			tokens[min] = temp;
		}
		return tokens;
	}
	
	public static void printTermFreqs() {
		int maxLength = 0;
		for (int i=0; i<terms.length; i++) {
			if (terms[i].getToken().length() > maxLength) {
				maxLength = terms[i].getToken().length();
			}
		}
		if (maxLength < 5) {
			maxLength = 6;
		}
		System.out.print("Term");
		//Proper Spacing
		for (int j=0; j<maxLength-2; j++) {
			System.out.print(" ");
		}
		System.out.println("Frequency");
		System.out.print("------");
		for (int k=0; k<maxLength-4; k++) {
			System.out.print(" ");
		}
		System.out.println("----------");
		for (int l=0; l<terms.length; l++) {
			System.out.print(terms[l].getToken());
			for (int h=0; h<maxLength-(terms[l].getToken().length())+2; h++) {
				System.out.print(" ");
			}
			System.out.println(terms[l].getFrequency());
		}
	}
	
	public int getLetterCount(char letter) {
		
	}
	
	public static void main(String[] args) {
//		while (true) {
			if (args.length == 1) {
				if (args[0].length() == 1) {
					Scanner scan= new Scanner(System.in);
					System.out.println("Enter a line of text");
					String userInput = scan.nextLine();
					Document text = new Document(userInput);
					printTermFreqs();
				} 
				
				else {
					System.out.println("Usage: java Document letter");
				}
			}
			else {
				
			}
			System.out.println("Usage: java Document letter");
//		}
	}
}
